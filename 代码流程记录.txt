1.新增套餐，同时保存套餐和菜品的关联关系：
    1.在controller写好方法接收前端请求
    2.建立一个dto类，继承自Setmeal类（主体），里面要包括那个保存界面的所有东西（设置为属性），List<SetmealDish>来接收套餐绑定的菜品信息
    3.去SetmealService接口处定义方法后，去实现类实现
    4.写方法体：
        1.保存套餐的基本信息，操作Setmeal表，执行insert操作
        2.导入SetmealdishService来操作Setmeal_dish表，保存与套餐关联的菜品
        3.从setmealDto中获取菜品集合,并且给每个元素加上套餐id
        4.用SetmealDishService调用saveBatch()方法批量保存

2.套餐分页查询功能
    1.在controller里面创建方法，返回值是R<Page>类型，接收问号路径中的参数，这样就行page(int page, int pageSize, String name)
    2.创造分页构造器对象Page<?>记得写泛型，把page和pageSize传进去
    3.创造查询构造器LambdaQueryWrapper<?>记得写泛型
    4.用like模糊匹配queryWrapper.like(判断条件,数据库字段,从前端接收的值)
    5.添加排序条件queryWrapper.orderByDesc(数据库字段)  --此处为降序
    6.Setmeal里面只存了分类的id，前端要的是分类的名称，所以要创建一个SetmealDto的Page对象，因为setmealDto里面有套餐名称属性,因为pageInfo里面的Setmeal里面已经有其他属性了，所以只用进行属性拷贝就行了：
        1.BeanUtils.copyProperties(从哪里拷贝，拷贝到哪里去,"records"),最后一个代表忽略什么,因为records的泛型是Setmeal和setmealDto不一样
        2.自己设置records：
            1.List<Setmeal> records = pageInfo.getRecords()
            2.用records.stream().map()单个操作，先获取分类id，然后注入分类的service，根据分类id查询分类对象
            3.判断查到的category是否为空，不为空就获取name字段，创建SetmealDto对象，先把Setmeal的属性拷贝到SetmealSto里面(此处item就是Setmeal），然后赋值给SetmealDto的categoryName
            4.返回SetmealDto对象
            5.打包，赋值dtoPage.setRecords(list);

3.删除套餐功能 --只能删除停售的套餐  --批量删除时接收？后面的ids参数，后面的多个id是用逗号隔开
    1.在controller里面提供方法，接收参数public R<String> delete(@RequestParam List<Long> ids)
    2.删除套餐时，对应的关联关系也要删除掉，具体细节可以封装到service去完成
    3.在service申明方法public void removeWithDish(SetmealDto setmealDto)，然后实现方法
    4.实现类中的逻辑方法：
        1.查询套餐售卖状态，是否可以删除：
            LambdaQueryWrapper<Setmeal> queryWrapper = new LambdaQueryWrapper();
            queryWrapper.in(Setmeal::getId,ids);
            queryWrapper.eq(Setmeal::getStatus,1);
            int count = this.count(queryWrapper); 其实SQL就是：select count(*) from setmeal where id in (1,2,3) and status = 1
        2.如果count大于0，则说明有在售卖的商品，不能出售，直接抛出业务异常throw new CustomException("套餐正在售卖中，不能删除");
        3.如果count等于0，则可以删除：
            1.先删除套餐表中的数据--Setmeal这张表：this.removeByIds(ids)
            2.再删除关系表中的数据--setmeal--dish这张表：
                1.注入SetmealDishService
                2.构造查询，LambdaQueryWrapper<SetmealDish> queryWrapper1 = new LambdaQueryWrapper<>();
                          queryWrapper1.in(SetmealDish::getSetmealId,ids);
                          setmealDishService.remove(queryWrapper1);
                3.注意，记得和上面查询时用的getId区分，上面操作的是套餐表，下面操作的是关联表，可以结合实体类里面的属性进行理解
    5.controller调用方法，然后返回字符串提示

4.移动端发送短信验证码登陆功能开发
    1.导入工具类，新建实体类、mapper、service、serviceImpl等基础工作
    2.修改LoginCheckFilter,放行移动端注册界面："/user/sendMsg",
                                           "/user/login"
    3.在过滤器里新增判断用户是否登陆，实现代码：
        if (request.getSession().getAttribute("user") != null){
                    log.info("用户已登陆，用户id为：{}",request.getSession().getAttribute("user"));

                    //获取员工id
                    Long userId = (Long) request.getSession().getAttribute("user");
                    BaseContext.setCurrentId(userId);

                    filterChain.doFilter(request,response);
                    return;
                }
    4.在controller里面新增方法public R<String> sendMsg(@RequestBody User user, HttpSession session)，因为前端传过来的是json格式，所以加@RequestBody，用User来接收手机号码,session里面放发送的那个验证码，后面用来比对
    5.编写方法体：
        1.获取手机号：String phone = user.getPhone();
        2.判断手机号是否为空：
            if (StringUtils.isNotEmpty(phone)){...}
        3.调用工具类，随机生成x位的验证码,转成String类型存储:String code = ValidateCodeUtils.generateValidateCode(6).toString();
        4.调用阿里云提供的短信服务API完成发送短信：SMSUtils.sendMessage("瑞吉外卖","这里填写那个码",phone,code);
        5.将生成的验证码保存到session中，以手机号为key,验证码为value：session.setAttribute(phone,code);
        6.返回R：return R.success("手机短信验证码发送成功")，if外面返回R.error("手机短信验证码发送失败")
    6.在controller新增方法:public R<User> login(@RequestBody User user, HttpSession session)
    7.登陆时，前端以键值对的形式提交过来手机号和验证码，后端的User类里面没有code这个属性，可以采用dto的形式，这里采用的是使用Map来接收数据
    8.获取手机号：String phone = map.get("phone").toString()
    9.获取验证码：String code = map.get("code").toString()
    10.从Session中获取保存的验证码：Object condeInSession = session.getAttribute(code)
    11.进行验证码比对（页面提交的和Session中保存的）：if (condeInSession != null && condeInSession.equals(code))：
        1.如果能够比对成功，说明登陆成功
        2.去数据库中查询是否有这个用户：LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();
                                  queryWrapper.eq(User::getPhone,phone);
                                  User user = userService.getOne(queryWrapper);
        3.如果没有，说明是新用户,新创建一个User对象，把各个属性保存进去，然后保存到数据库：
            if (user == null){
                  user = new User();
                  user.setPhone(phone);
                  user.setStatus(1);
                  userService.save(user);
              }
        4.把用户id放入session中：session.setAttribute("user",user.getId());
    12.进行验证码比对的那个if内，返回R.success(user),最外层返回return R.error("登陆失败")\

5.导入用户地址簿相关功能：
    1.新增地址：
        1.用AddressBook对象接收前端传回的数据，由于登陆时我们就把用户id放到session中了，且接收到的数据中用户id为空，所以从session中获取id并且赋值：addressBook.setUserId(BaseContext.getCurrentId())
        2.调用service保存地址，并且返回地址return R.success(addressBook)
    2.设置默认地址：
        1.用PutMapping接收参数public R<AddressBook> setDefault(@RequestBody AddressBook addressBook) --本质是更新数据库，所以用put
        2.创造LambdaUpdateWrapper对象，看清楚是“xxxUpdatexxx"别写错了
        3.用eq方法查询到该用户所对应的一个或者多个地址，然后用set方法把所有地址的isDefault(为0则不是默认，为1则代表默认地址)设置为0
        4.用service调用update方法更新到数据库
        5.把当前接收到的地址的isDefault改为1：addressBook.setIsDefault(1)
        6.用service调用updateById方法更新到数据库，最后返回该地址return R.success(addressBook);
    3.查询默认地址：
        1.GetMapping，不用接收参数
        2.创造LambdaQueryWrapper对象查询
        3.调用eq方法先查询该用户对应的那些地址，然后再调用eq方法查询那些地址的isDefault是否为1
        4.service调用getOne方法获取queryWrapper
        5.判断queryWrapper是否为空，如果为空，就返回return R.error("没有找到该对象")，不为空return R.success(addressBook)
    4.查询指定用户的所有地址:
        1.由于登陆时我们就把用户id放到session中了，且接收到的数据中用户id为空，所以从session中获取id并且赋值：addressBook.setUserId(BaseContext.getCurrentId())
        2.创建对象LambdaQueryWrapper查询
        3.调用eq方法根据UserId查询该id所有地址，并且根据地址的更新时间降序排序，最后service调用list将查询到的结果返回前端return R.success(addressBookService.list(queryWrapper));

6.改造移动端查询菜品，加入菜品对应的口味数据：
    1.返回部分采用DishDto:public R<List<DishDto>> list(Dish dish)
    2.因为这个Dto继承了dish且别的地方也用到这个方法（菜品数据），所以先把继承部分的菜品查询出来：
        1.构造查询
        LambdaQueryWrapper<Dish> queryWrapper = new LambdaQueryWrapper<>();
        2.构造查询条件
        queryWrapper.eq(dish.getCategoryId() != null,Dish::getCategoryId,dish.getCategoryId());
        3.查询状态是否起售
        queryWrapper.eq(Dish::getStatus,1);
        4.添加排序条件
        queryWrapper.orderByAsc(Dish::getSort).orderByAsc(Dish::getUpdateTime);
        5.查询
        List<Dish> list = dishService.list(queryWrapper);
    3.根据查询到的菜品，用菜品id去口味表查询对应的口味，这里要使用List<DishDto> dishDtoList = list.stream().map()来单独操作每个菜品，因为每个菜品都对应着零个、一个或者多个口味：
        1.创建一个dishDto对象，对应单个操作的dish：DishDto dishDto = new DishDto()
        2.先把每个item(dish) --菜品信息复制到dishDto里面：BeanUtils.copyProperties(item,dishDto);
        3.获取item(dish)的id：item.getId();
        4.创建查询对象，根据item(dish)的id去口味表里面查询对应的口味：
            LambdaQueryWrapper<DishFlavor> queryWrapper1 = new LambdaQueryWrapper<>();
            queryWrapper1.eq(id != null,DishFlavor::getDishId,id);
        5.调用口味表对应的service查询：List<DishFlavor> dishFlavors = dishFlavorService.list(queryWrapper1);
        6.把查询到的口味集合设置给dishDto的flavors属性：dishDto.setFlavors(dishFlavors);
        7.返回每个dishDto对象：return dishDto;，然后在外面打包成一个新的集合dishDto类型的list：.collect(Collectors.toList());
7.购物车开发：
    1.保存功能：
        1.public R<ShoppingCart> save(@RequestBody ShoppingCart shoppingCart)，返回ShoppingCart对象，方便前端展示。前端传过来json一定要用@RequestBody来修饰，不然接收不到数据！！！
        2.给前端发送过来的ShoppingCart赋值UserId:Long currentId = BaseContext.getCurrentId();shoppingCart.setUserId(currentId);
        3.根据前端传送来的是菜品id还是套餐id来判断是菜品还是套餐，获取其中一个然后判断即可：Long dishId = shoppingCart.getDishId();然后if(dishId != null)
        4.查询数据库时根据UserID和DishID/SetmealID,所以在第三点判断前先创建查询对象LambdaQueryWrapper，eq方法先把UserID这个条件加进去，然后再根据判断eq加入DishID/SetmealID条件，进行查询
        5.对查询结果判断是否为空，来确定数据库中是否有这个菜品或者套餐，如果没有，就先设置shoppingCart.setNumber(1)，再调用service保存，并且把前端给的这个shoppingCat赋值给shoppingCart1（方便返回，顾及了有的情况），如果有就更新number字段：
            Integer number = shoppingCart1.getNumber();
            shoppingCart1.setNumber(number + 1);
            shoppingCartService.updateById(shoppingCart1);
        6.返回return R.success(shoppingCart1);
    2.查询购物车：
        1.public R<List<ShoppingCart>> list()
        2.根据当前登陆的用户id删除，先获取id
        3.创建LambdaQueryWrapper查询对象
        4.eq匹配用户id，然后查询
        5.返回：R.success(list);
    3.清空购物车：
        1.根据当前登陆的用户id删除，先获取id
        2.创建LambdaQueryWrapper查询对象
        3.eq匹配用户id，删除：shoppingCartService.remove(queryWrapper);
        4.返回
8.用户下单(复杂)
    1.接收前端传来的数据public R<String> submit(@RequestBody Orders orders)
    2.在service里面创建方法并且实现public void submit(Orders orders);
    3.在实现类里面操作，实现类上加上事务注解@Transactional --自己在实现类写的方法都加@Transactional：
        1.因为前端传过来的数据只有三条，剩下的Orders里面的属性要我们自己封装：
            1.根据用户id查询购物车，然后判断是否为空，为空就抛出业务异常：
                Long currentId = BaseContext.getCurrentId();
                LambdaQueryWrapper<ShoppingCart> queryWrapper = new LambdaQueryWrapper<>();
                queryWrapper.eq(ShoppingCart::getUserId,currentId);
                List<ShoppingCart> list = shoppingCartService.list(queryWrapper);

                throw new CustomException("购物车为空，不能下单");
            2.查询用户信息：User user = userService.getById(currentId);
            3.根据前端传过来的地址id查询对应地址，然后判断是否为空，为空就抛出业务异常：
                Long addressBookId = orders.getAddressBookId();
                AddressBook addressBook = addressBookService.getById(addressBookId);

                throw new CustomException("用户地址信息有误，不能下单");
            4.用IdWorker类生成一个订单编号，并且赋值：long orderId = IdWorker.getId();  //订单号
            5.还要操作OrderDetail这个表，所以用stream().map()来封装每个OrderDetail：
                List<OrderDetail> orderDetails = list.stream().map((item) -> {
                            ......
                }).collect(Collectors.toList());
            6.计算金额：
                1.创建AtomicInteger amount = new AtomicInteger(0)可以保护线程，防止计算出错
                2.计算金额，数量乘以价格：amount.addAndGet(item.getAmount().multiply(new BigDecimal(item.getNumber())).intValue());
            7.给orders的各个属性赋值：
                orders.setId(orderId);
                orders.setOrderTime(LocalDateTime.now());
                orders.setCheckoutTime(LocalDateTime.now());
                orders.setStatus(2);
                orders.setAmount(new BigDecimal(amount.get()));
                orders.setUserId(currentId);
                orders.setNumber(String.valueOf(orderId));
                orders.setUserName(user.getName());
                orders.setConsignee(addressBook.getConsignee());
                orders.setPhone(addressBook.getPhone());
                orders.setAddress((addressBook.getProvinceName() == null ? "" : addressBook.getProvinceName())
                        + (addressBook.getCityName() == null ? "" : addressBook.getCityName())
                        + (addressBook.getDistrictName() == null ? "" : addressBook.getDistrictName())
                        + (addressBook.getDetail() == null ? "" : addressBook.getDetail()));
        2.保存到orders表里面：this.save(orders) --实现类写的方法都用this --谁调用就是谁
        3.保存到orderDetail表里面：orderDetailService.saveBatch(orderDetails);
        4.同时清空购物车：shoppingCartService.remove(queryWrapper);
    4.在controller里面调用方法，最后返回成功的字符串信息
    5.注意：提前导入各个要用到的service：
        @Autowired
        private ShoppingCartService shoppingCartService;

        @Autowired
        private UserService userService;

        @Autowired
        private AddressBookService addressBookService;

        @Autowired
        private OrderDetailService orderDetailService;
9.jedis操作redis：
    1.导入依赖：
        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>2.9.0</version>
        </dependency>
    2.获取连接Jedis jedis = new Jedis("localhost",6379);
    3.执行操作jedis.set("name","zukedegou");
    4.关闭连接jedis.close();





























